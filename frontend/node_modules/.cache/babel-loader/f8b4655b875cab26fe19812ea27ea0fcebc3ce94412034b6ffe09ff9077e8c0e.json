{"ast":null,"code":"// src/services/modal-handlers.js\nimport{authService}from'./authService';import{chatService}from'./chatService';class ModalHandlers{constructor(){this.activeModals=[];this.eventListeners=[];}initialize(){// Set up global event listeners for modals\nconst modalEventListener=this.handleModalEvent.bind(this);window.addEventListener('modal_event',modalEventListener);this.eventListeners.push({type:'modal_event',handler:modalEventListener});// Listen for auth-related events\ndocument.querySelectorAll('.login-button').forEach(button=>{button.addEventListener('click',()=>this.openModal('login'));});document.querySelectorAll('.register-button').forEach(button=>{button.addEventListener('click',()=>this.openModal('register'));});// Close modal on backdrop click or X button\ndocument.addEventListener('click',e=>{if(e.target.classList.contains('modal-backdrop')||e.target.classList.contains('modal-close')){this.closeAllModals();}});}cleanup(){// Remove all event listeners\nthis.eventListeners.forEach(listener=>{window.removeEventListener(listener.type,listener.handler);});this.eventListeners=[];}handleModalEvent(event){const{modalType,data}=event.detail;this.openModal(modalType,data);}openModal(type){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const modal=document.getElementById(`${type}-modal`);if(!modal)return;// Display the modal\nmodal.style.display='block';document.body.classList.add('modal-open');this.activeModals.push(type);// Handle specific modal types\nswitch(type){case'login':this.initLoginForm();break;case'register':this.initRegisterForm();break;case'chat':this.initChatModal(data);break;default:break;}}closeAllModals(){document.querySelectorAll('.modal').forEach(modal=>{modal.style.display='none';});document.body.classList.remove('modal-open');this.activeModals=[];}initLoginForm(){const form=document.getElementById('login-form');if(!form)return;const handleSubmit=async e=>{e.preventDefault();const email=form.querySelector('input[name=\"email\"]').value;const password=form.querySelector('input[name=\"password\"]').value;try{await authService.login({email,password});this.closeAllModals();window.location.reload();// Refresh to show authenticated state\n}catch(error){// Display error message in the modal\nconst errorElement=form.querySelector('.error-message');if(errorElement){errorElement.textContent=error.message;errorElement.style.display='block';}}};// Remove existing event listener to prevent duplicates\nform.removeEventListener('submit',handleSubmit);// Add new event listener\nform.addEventListener('submit',handleSubmit);}initRegisterForm(){const form=document.getElementById('register-form');if(!form)return;const handleSubmit=async e=>{e.preventDefault();const username=form.querySelector('input[name=\"username\"]').value;const email=form.querySelector('input[name=\"email\"]').value;const password=form.querySelector('input[name=\"password\"]').value;try{await authService.register({username,email,password});this.closeAllModals();window.location.reload();// Refresh to show authenticated state\n}catch(error){// Display error message in the modal\nconst errorElement=form.querySelector('.error-message');if(errorElement){errorElement.textContent=error.message;errorElement.style.display='block';}}};// Remove existing event listener to prevent duplicates\nform.removeEventListener('submit',handleSubmit);// Add new event listener\nform.addEventListener('submit',handleSubmit);}initChatModal(data){const{userId}=data;const chatContainer=document.getElementById('chat-messages-container');if(!chatContainer||!userId)return;// Load chat history with this user\nchatService.getMessages(userId).then(response=>{// Render messages\nchatContainer.innerHTML=response.messages.map(msg=>`<div class=\"message ${msg.sender==='me'?'sent':'received'}\">\n                        <p>${msg.content}</p>\n                        <span class=\"timestamp\">${new Date(msg.timestamp).toLocaleTimeString()}</span>\n                      </div>`).join('');// Scroll to bottom\nchatContainer.scrollTop=chatContainer.scrollHeight;}).catch(error=>{console.error('Failed to load messages:',error);chatContainer.innerHTML='<p class=\"error\">Failed to load messages. Please try again.</p>';});// Set up message form\nconst messageForm=document.getElementById('chat-message-form');if(messageForm){const handleSend=async e=>{e.preventDefault();const messageInput=messageForm.querySelector('input[name=\"message\"]');const message=messageInput.value.trim();if(message){try{await chatService.sendMessage(userId,message);messageInput.value='';}catch(error){console.error('Failed to send message:',error);}}};// Remove existing event listener to prevent duplicates\nmessageForm.removeEventListener('submit',handleSend);// Add new event listener\nmessageForm.addEventListener('submit',handleSend);}}}export const modalHandlers=new ModalHandlers();","map":{"version":3,"names":["authService","chatService","ModalHandlers","constructor","activeModals","eventListeners","initialize","modalEventListener","handleModalEvent","bind","window","addEventListener","push","type","handler","document","querySelectorAll","forEach","button","openModal","e","target","classList","contains","closeAllModals","cleanup","listener","removeEventListener","event","modalType","data","detail","arguments","length","undefined","modal","getElementById","style","display","body","add","initLoginForm","initRegisterForm","initChatModal","remove","form","handleSubmit","preventDefault","email","querySelector","value","password","login","location","reload","error","errorElement","textContent","message","username","register","userId","chatContainer","getMessages","then","response","innerHTML","messages","map","msg","sender","content","Date","timestamp","toLocaleTimeString","join","scrollTop","scrollHeight","catch","console","messageForm","handleSend","messageInput","trim","sendMessage","modalHandlers"],"sources":["/Users/lszydlowski/Desktop/czat_portal/frontend/src/services/modal-handlers.js"],"sourcesContent":["// src/services/modal-handlers.js\nimport { authService } from './authService';\nimport { chatService } from './chatService';\n\nclass ModalHandlers {\n  constructor() {\n    this.activeModals = [];\n    this.eventListeners = [];\n  }\n\n  initialize() {\n    // Set up global event listeners for modals\n    const modalEventListener = this.handleModalEvent.bind(this);\n    window.addEventListener('modal_event', modalEventListener);\n    this.eventListeners.push({ type: 'modal_event', handler: modalEventListener });\n    \n    // Listen for auth-related events\n    document.querySelectorAll('.login-button').forEach(button => {\n      button.addEventListener('click', () => this.openModal('login'));\n    });\n    \n    document.querySelectorAll('.register-button').forEach(button => {\n      button.addEventListener('click', () => this.openModal('register'));\n    });\n    \n    // Close modal on backdrop click or X button\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('modal-backdrop') || \n          e.target.classList.contains('modal-close')) {\n        this.closeAllModals();\n      }\n    });\n  }\n\n  cleanup() {\n    // Remove all event listeners\n    this.eventListeners.forEach(listener => {\n      window.removeEventListener(listener.type, listener.handler);\n    });\n    this.eventListeners = [];\n  }\n\n  handleModalEvent(event) {\n    const { modalType, data } = event.detail;\n    this.openModal(modalType, data);\n  }\n\n  openModal(type, data = {}) {\n    const modal = document.getElementById(`${type}-modal`);\n    if (!modal) return;\n    \n    // Display the modal\n    modal.style.display = 'block';\n    document.body.classList.add('modal-open');\n    this.activeModals.push(type);\n    \n    // Handle specific modal types\n    switch (type) {\n      case 'login':\n        this.initLoginForm();\n        break;\n      case 'register':\n        this.initRegisterForm();\n        break;\n      case 'chat':\n        this.initChatModal(data);\n        break;\n      default:\n        break;\n    }\n  }\n\n  closeAllModals() {\n    document.querySelectorAll('.modal').forEach(modal => {\n      modal.style.display = 'none';\n    });\n    document.body.classList.remove('modal-open');\n    this.activeModals = [];\n  }\n\n  initLoginForm() {\n    const form = document.getElementById('login-form');\n    if (!form) return;\n    \n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      const email = form.querySelector('input[name=\"email\"]').value;\n      const password = form.querySelector('input[name=\"password\"]').value;\n      \n      try {\n        await authService.login({ email, password });\n        this.closeAllModals();\n        window.location.reload(); // Refresh to show authenticated state\n      } catch (error) {\n        // Display error message in the modal\n        const errorElement = form.querySelector('.error-message');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n          errorElement.style.display = 'block';\n        }\n      }\n    };\n    \n    // Remove existing event listener to prevent duplicates\n    form.removeEventListener('submit', handleSubmit);\n    // Add new event listener\n    form.addEventListener('submit', handleSubmit);\n  }\n\n  initRegisterForm() {\n    const form = document.getElementById('register-form');\n    if (!form) return;\n    \n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      const username = form.querySelector('input[name=\"username\"]').value;\n      const email = form.querySelector('input[name=\"email\"]').value;\n      const password = form.querySelector('input[name=\"password\"]').value;\n      \n      try {\n        await authService.register({ username, email, password });\n        this.closeAllModals();\n        window.location.reload(); // Refresh to show authenticated state\n      } catch (error) {\n        // Display error message in the modal\n        const errorElement = form.querySelector('.error-message');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n          errorElement.style.display = 'block';\n        }\n      }\n    };\n    \n    // Remove existing event listener to prevent duplicates\n    form.removeEventListener('submit', handleSubmit);\n    // Add new event listener\n    form.addEventListener('submit', handleSubmit);\n  }\n\n  initChatModal(data) {\n    const { userId } = data;\n    const chatContainer = document.getElementById('chat-messages-container');\n    if (!chatContainer || !userId) return;\n    \n    // Load chat history with this user\n    chatService.getMessages(userId)\n      .then(response => {\n        // Render messages\n        chatContainer.innerHTML = response.messages\n          .map(msg => `<div class=\"message ${msg.sender === 'me' ? 'sent' : 'received'}\">\n                        <p>${msg.content}</p>\n                        <span class=\"timestamp\">${new Date(msg.timestamp).toLocaleTimeString()}</span>\n                      </div>`)\n          .join('');\n          \n        // Scroll to bottom\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      })\n      .catch(error => {\n        console.error('Failed to load messages:', error);\n        chatContainer.innerHTML = '<p class=\"error\">Failed to load messages. Please try again.</p>';\n      });\n      \n    // Set up message form\n    const messageForm = document.getElementById('chat-message-form');\n    if (messageForm) {\n      const handleSend = async (e) => {\n        e.preventDefault();\n        const messageInput = messageForm.querySelector('input[name=\"message\"]');\n        const message = messageInput.value.trim();\n        \n        if (message) {\n          try {\n            await chatService.sendMessage(userId, message);\n            messageInput.value = '';\n          } catch (error) {\n            console.error('Failed to send message:', error);\n          }\n        }\n      };\n      \n      // Remove existing event listener to prevent duplicates\n      messageForm.removeEventListener('submit', handleSend);\n      // Add new event listener\n      messageForm.addEventListener('submit', handleSend);\n    }\n  }\n}\n\nexport const modalHandlers = new ModalHandlers();"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAQ,eAAe,CAC3C,OAASC,WAAW,KAAQ,eAAe,CAE3C,KAAM,CAAAC,aAAc,CAClBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,YAAY,CAAG,EAAE,CACtB,IAAI,CAACC,cAAc,CAAG,EAAE,CAC1B,CAEAC,UAAUA,CAAA,CAAG,CACX;AACA,KAAM,CAAAC,kBAAkB,CAAG,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAAC,CAC3DC,MAAM,CAACC,gBAAgB,CAAC,aAAa,CAAEJ,kBAAkB,CAAC,CAC1D,IAAI,CAACF,cAAc,CAACO,IAAI,CAAC,CAAEC,IAAI,CAAE,aAAa,CAAEC,OAAO,CAAEP,kBAAmB,CAAC,CAAC,CAE9E;AACAQ,QAAQ,CAACC,gBAAgB,CAAC,eAAe,CAAC,CAACC,OAAO,CAACC,MAAM,EAAI,CAC3DA,MAAM,CAACP,gBAAgB,CAAC,OAAO,CAAE,IAAM,IAAI,CAACQ,SAAS,CAAC,OAAO,CAAC,CAAC,CACjE,CAAC,CAAC,CAEFJ,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,CAAC,CAACC,OAAO,CAACC,MAAM,EAAI,CAC9DA,MAAM,CAACP,gBAAgB,CAAC,OAAO,CAAE,IAAM,IAAI,CAACQ,SAAS,CAAC,UAAU,CAAC,CAAC,CACpE,CAAC,CAAC,CAEF;AACAJ,QAAQ,CAACJ,gBAAgB,CAAC,OAAO,CAAGS,CAAC,EAAK,CACxC,GAAIA,CAAC,CAACC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAC7CH,CAAC,CAACC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,CAAE,CAC9C,IAAI,CAACC,cAAc,CAAC,CAAC,CACvB,CACF,CAAC,CAAC,CACJ,CAEAC,OAAOA,CAAA,CAAG,CACR;AACA,IAAI,CAACpB,cAAc,CAACY,OAAO,CAACS,QAAQ,EAAI,CACtChB,MAAM,CAACiB,mBAAmB,CAACD,QAAQ,CAACb,IAAI,CAAEa,QAAQ,CAACZ,OAAO,CAAC,CAC7D,CAAC,CAAC,CACF,IAAI,CAACT,cAAc,CAAG,EAAE,CAC1B,CAEAG,gBAAgBA,CAACoB,KAAK,CAAE,CACtB,KAAM,CAAEC,SAAS,CAAEC,IAAK,CAAC,CAAGF,KAAK,CAACG,MAAM,CACxC,IAAI,CAACZ,SAAS,CAACU,SAAS,CAAEC,IAAI,CAAC,CACjC,CAEAX,SAASA,CAACN,IAAI,CAAa,IAAX,CAAAiB,IAAI,CAAAE,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACvB,KAAM,CAAAG,KAAK,CAAGpB,QAAQ,CAACqB,cAAc,CAAC,GAAGvB,IAAI,QAAQ,CAAC,CACtD,GAAI,CAACsB,KAAK,CAAE,OAEZ;AACAA,KAAK,CAACE,KAAK,CAACC,OAAO,CAAG,OAAO,CAC7BvB,QAAQ,CAACwB,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAAC,YAAY,CAAC,CACzC,IAAI,CAACpC,YAAY,CAACQ,IAAI,CAACC,IAAI,CAAC,CAE5B;AACA,OAAQA,IAAI,EACV,IAAK,OAAO,CACV,IAAI,CAAC4B,aAAa,CAAC,CAAC,CACpB,MACF,IAAK,UAAU,CACb,IAAI,CAACC,gBAAgB,CAAC,CAAC,CACvB,MACF,IAAK,MAAM,CACT,IAAI,CAACC,aAAa,CAACb,IAAI,CAAC,CACxB,MACF,QACE,MACJ,CACF,CAEAN,cAAcA,CAAA,CAAG,CACfT,QAAQ,CAACC,gBAAgB,CAAC,QAAQ,CAAC,CAACC,OAAO,CAACkB,KAAK,EAAI,CACnDA,KAAK,CAACE,KAAK,CAACC,OAAO,CAAG,MAAM,CAC9B,CAAC,CAAC,CACFvB,QAAQ,CAACwB,IAAI,CAACjB,SAAS,CAACsB,MAAM,CAAC,YAAY,CAAC,CAC5C,IAAI,CAACxC,YAAY,CAAG,EAAE,CACxB,CAEAqC,aAAaA,CAAA,CAAG,CACd,KAAM,CAAAI,IAAI,CAAG9B,QAAQ,CAACqB,cAAc,CAAC,YAAY,CAAC,CAClD,GAAI,CAACS,IAAI,CAAE,OAEX,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAA1B,CAAC,EAAK,CAChCA,CAAC,CAAC2B,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAC,KAAK,CAAGH,IAAI,CAACI,aAAa,CAAC,qBAAqB,CAAC,CAACC,KAAK,CAC7D,KAAM,CAAAC,QAAQ,CAAGN,IAAI,CAACI,aAAa,CAAC,wBAAwB,CAAC,CAACC,KAAK,CAEnE,GAAI,CACF,KAAM,CAAAlD,WAAW,CAACoD,KAAK,CAAC,CAAEJ,KAAK,CAAEG,QAAS,CAAC,CAAC,CAC5C,IAAI,CAAC3B,cAAc,CAAC,CAAC,CACrBd,MAAM,CAAC2C,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAE;AAC5B,CAAE,MAAOC,KAAK,CAAE,CACd;AACA,KAAM,CAAAC,YAAY,CAAGX,IAAI,CAACI,aAAa,CAAC,gBAAgB,CAAC,CACzD,GAAIO,YAAY,CAAE,CAChBA,YAAY,CAACC,WAAW,CAAGF,KAAK,CAACG,OAAO,CACxCF,YAAY,CAACnB,KAAK,CAACC,OAAO,CAAG,OAAO,CACtC,CACF,CACF,CAAC,CAED;AACAO,IAAI,CAAClB,mBAAmB,CAAC,QAAQ,CAAEmB,YAAY,CAAC,CAChD;AACAD,IAAI,CAAClC,gBAAgB,CAAC,QAAQ,CAAEmC,YAAY,CAAC,CAC/C,CAEAJ,gBAAgBA,CAAA,CAAG,CACjB,KAAM,CAAAG,IAAI,CAAG9B,QAAQ,CAACqB,cAAc,CAAC,eAAe,CAAC,CACrD,GAAI,CAACS,IAAI,CAAE,OAEX,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAA1B,CAAC,EAAK,CAChCA,CAAC,CAAC2B,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAY,QAAQ,CAAGd,IAAI,CAACI,aAAa,CAAC,wBAAwB,CAAC,CAACC,KAAK,CACnE,KAAM,CAAAF,KAAK,CAAGH,IAAI,CAACI,aAAa,CAAC,qBAAqB,CAAC,CAACC,KAAK,CAC7D,KAAM,CAAAC,QAAQ,CAAGN,IAAI,CAACI,aAAa,CAAC,wBAAwB,CAAC,CAACC,KAAK,CAEnE,GAAI,CACF,KAAM,CAAAlD,WAAW,CAAC4D,QAAQ,CAAC,CAAED,QAAQ,CAAEX,KAAK,CAAEG,QAAS,CAAC,CAAC,CACzD,IAAI,CAAC3B,cAAc,CAAC,CAAC,CACrBd,MAAM,CAAC2C,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAE;AAC5B,CAAE,MAAOC,KAAK,CAAE,CACd;AACA,KAAM,CAAAC,YAAY,CAAGX,IAAI,CAACI,aAAa,CAAC,gBAAgB,CAAC,CACzD,GAAIO,YAAY,CAAE,CAChBA,YAAY,CAACC,WAAW,CAAGF,KAAK,CAACG,OAAO,CACxCF,YAAY,CAACnB,KAAK,CAACC,OAAO,CAAG,OAAO,CACtC,CACF,CACF,CAAC,CAED;AACAO,IAAI,CAAClB,mBAAmB,CAAC,QAAQ,CAAEmB,YAAY,CAAC,CAChD;AACAD,IAAI,CAAClC,gBAAgB,CAAC,QAAQ,CAAEmC,YAAY,CAAC,CAC/C,CAEAH,aAAaA,CAACb,IAAI,CAAE,CAClB,KAAM,CAAE+B,MAAO,CAAC,CAAG/B,IAAI,CACvB,KAAM,CAAAgC,aAAa,CAAG/C,QAAQ,CAACqB,cAAc,CAAC,yBAAyB,CAAC,CACxE,GAAI,CAAC0B,aAAa,EAAI,CAACD,MAAM,CAAE,OAE/B;AACA5D,WAAW,CAAC8D,WAAW,CAACF,MAAM,CAAC,CAC5BG,IAAI,CAACC,QAAQ,EAAI,CAChB;AACAH,aAAa,CAACI,SAAS,CAAGD,QAAQ,CAACE,QAAQ,CACxCC,GAAG,CAACC,GAAG,EAAI,uBAAuBA,GAAG,CAACC,MAAM,GAAK,IAAI,CAAG,MAAM,CAAG,UAAU;AACtF,6BAA6BD,GAAG,CAACE,OAAO;AACxC,kDAAkD,GAAI,CAAAC,IAAI,CAACH,GAAG,CAACI,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC;AAC9F,6BAA6B,CAAC,CACnBC,IAAI,CAAC,EAAE,CAAC,CAEX;AACAb,aAAa,CAACc,SAAS,CAAGd,aAAa,CAACe,YAAY,CACtD,CAAC,CAAC,CACDC,KAAK,CAACvB,KAAK,EAAI,CACdwB,OAAO,CAACxB,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChDO,aAAa,CAACI,SAAS,CAAG,iEAAiE,CAC7F,CAAC,CAAC,CAEJ;AACA,KAAM,CAAAc,WAAW,CAAGjE,QAAQ,CAACqB,cAAc,CAAC,mBAAmB,CAAC,CAChE,GAAI4C,WAAW,CAAE,CACf,KAAM,CAAAC,UAAU,CAAG,KAAO,CAAA7D,CAAC,EAAK,CAC9BA,CAAC,CAAC2B,cAAc,CAAC,CAAC,CAClB,KAAM,CAAAmC,YAAY,CAAGF,WAAW,CAAC/B,aAAa,CAAC,uBAAuB,CAAC,CACvE,KAAM,CAAAS,OAAO,CAAGwB,YAAY,CAAChC,KAAK,CAACiC,IAAI,CAAC,CAAC,CAEzC,GAAIzB,OAAO,CAAE,CACX,GAAI,CACF,KAAM,CAAAzD,WAAW,CAACmF,WAAW,CAACvB,MAAM,CAAEH,OAAO,CAAC,CAC9CwB,YAAY,CAAChC,KAAK,CAAG,EAAE,CACzB,CAAE,MAAOK,KAAK,CAAE,CACdwB,OAAO,CAACxB,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CACF,CAAC,CAED;AACAyB,WAAW,CAACrD,mBAAmB,CAAC,QAAQ,CAAEsD,UAAU,CAAC,CACrD;AACAD,WAAW,CAACrE,gBAAgB,CAAC,QAAQ,CAAEsE,UAAU,CAAC,CACpD,CACF,CACF,CAEA,MAAO,MAAM,CAAAI,aAAa,CAAG,GAAI,CAAAnF,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}