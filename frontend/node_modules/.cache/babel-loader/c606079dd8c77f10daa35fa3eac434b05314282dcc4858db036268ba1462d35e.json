{"ast":null,"code":"// src/context/AuthContext.js\nimport React,{createContext,useContext,useState,useEffect}from'react';import{api}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[isAdmin,setIsAdmin]=useState(false);useEffect(()=>{const token=localStorage.getItem('token');if(token){fetchUserData();}},[]);const fetchUserData=async()=>{try{// This will use the updated api service with HTTPS\nconst userData=await api.get('/user/profile');setCurrentUser(userData);setIsAdmin(userData.role==='ADMIN');}catch(error){console.error('Error fetching user data:',error);}};const requireAdmin=Component=>{return function AdminProtected(props){if(!isAdmin){return/*#__PURE__*/_jsx(Navigate,{to:\"/\"});}return/*#__PURE__*/_jsx(Component,{...props});};};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{currentUser,isAdmin,requireAdmin},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsx","_jsx","AuthContext","AuthProvider","_ref","children","currentUser","setCurrentUser","isAdmin","setIsAdmin","token","localStorage","getItem","fetchUserData","userData","get","role","error","console","requireAdmin","Component","AdminProtected","props","Navigate","to","Provider","value","useAuth"],"sources":["/Users/lszydlowski/Desktop/czat_portal/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData();\n    }\n  }, []);\n\n  const fetchUserData = async () => {\n    try {\n      // This will use the updated api service with HTTPS\n      const userData = await api.get('/user/profile');\n      setCurrentUser(userData);\n      setIsAdmin(userData.role === 'ADMIN');\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n    }\n  };\n\n  const requireAdmin = (Component) => {\n    return function AdminProtected(props) {\n      if (!isAdmin) {\n        return <Navigate to=\"/\" />;\n      }\n      return <Component {...props} />;\n    };\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      currentUser, \n      isAdmin,\n      requireAdmin \n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,GAAG,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtC,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,IAAI,CAAC,CAEvC,MAAO,MAAM,CAAAQ,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAE7CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTG,aAAa,CAAC,CAAC,CACjB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAf,GAAG,CAACgB,GAAG,CAAC,eAAe,CAAC,CAC/CR,cAAc,CAACO,QAAQ,CAAC,CACxBL,UAAU,CAACK,QAAQ,CAACE,IAAI,GAAK,OAAO,CAAC,CACvC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC,CAED,KAAM,CAAAE,YAAY,CAAIC,SAAS,EAAK,CAClC,MAAO,SAAS,CAAAC,cAAcA,CAACC,KAAK,CAAE,CACpC,GAAI,CAACd,OAAO,CAAE,CACZ,mBAAOP,IAAA,CAACsB,QAAQ,EAACC,EAAE,CAAC,GAAG,CAAE,CAAC,CAC5B,CACA,mBAAOvB,IAAA,CAACmB,SAAS,KAAKE,KAAK,CAAG,CAAC,CACjC,CAAC,CACH,CAAC,CAED,mBACErB,IAAA,CAACC,WAAW,CAACuB,QAAQ,EAACC,KAAK,CAAE,CAC3BpB,WAAW,CACXE,OAAO,CACPW,YACF,CAAE,CAAAd,QAAA,CACCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAsB,OAAO,CAAGA,CAAA,GAAM/B,UAAU,CAACM,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}