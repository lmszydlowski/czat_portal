{"ast":null,"code":"// src/services/modal-handlers.js\nimport { authService } from './authService';\nimport { chatService } from './chatService';\nclass ModalHandlers {\n  constructor() {\n    this.activeModals = [];\n    this.eventListeners = [];\n  }\n  initialize() {\n    // Set up global event listeners for modals\n    const modalEventListener = this.handleModalEvent.bind(this);\n    window.addEventListener('modal_event', modalEventListener);\n    this.eventListeners.push({\n      type: 'modal_event',\n      handler: modalEventListener\n    });\n\n    // Listen for auth-related events\n    document.querySelectorAll('.login-button').forEach(button => {\n      button.addEventListener('click', () => this.openModal('login'));\n    });\n    document.querySelectorAll('.register-button').forEach(button => {\n      button.addEventListener('click', () => this.openModal('register'));\n    });\n\n    // Close modal on backdrop click or X button\n    document.addEventListener('click', e => {\n      if (e.target.classList.contains('modal-backdrop') || e.target.classList.contains('modal-close')) {\n        this.closeAllModals();\n      }\n    });\n  }\n  cleanup() {\n    // Remove all event listeners\n    this.eventListeners.forEach(listener => {\n      window.removeEventListener(listener.type, listener.handler);\n    });\n    this.eventListeners = [];\n  }\n  handleModalEvent(event) {\n    const {\n      modalType,\n      data\n    } = event.detail;\n    this.openModal(modalType, data);\n  }\n  openModal(type, data = {}) {\n    const modal = document.getElementById(`${type}-modal`);\n    if (!modal) return;\n\n    // Display the modal\n    modal.style.display = 'block';\n    document.body.classList.add('modal-open');\n    this.activeModals.push(type);\n\n    // Handle specific modal types\n    switch (type) {\n      case 'login':\n        this.initLoginForm();\n        break;\n      case 'register':\n        this.initRegisterForm();\n        break;\n      case 'chat':\n        this.initChatModal(data);\n        break;\n      default:\n        break;\n    }\n  }\n  closeAllModals() {\n    document.querySelectorAll('.modal').forEach(modal => {\n      modal.style.display = 'none';\n    });\n    document.body.classList.remove('modal-open');\n    this.activeModals = [];\n  }\n  initLoginForm() {\n    const form = document.getElementById('login-form');\n    if (!form) return;\n    const handleSubmit = async e => {\n      e.preventDefault();\n      const email = form.querySelector('input[name=\"email\"]').value;\n      const password = form.querySelector('input[name=\"password\"]').value;\n      try {\n        await authService.login({\n          email,\n          password\n        });\n        this.closeAllModals();\n        window.location.reload(); // Refresh to show authenticated state\n      } catch (error) {\n        // Display error message in the modal\n        const errorElement = form.querySelector('.error-message');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n          errorElement.style.display = 'block';\n        }\n      }\n    };\n\n    // Remove existing event listener to prevent duplicates\n    form.removeEventListener('submit', handleSubmit);\n    // Add new event listener\n    form.addEventListener('submit', handleSubmit);\n  }\n  initRegisterForm() {\n    const form = document.getElementById('register-form');\n    if (!form) return;\n    const handleSubmit = async e => {\n      e.preventDefault();\n      const username = form.querySelector('input[name=\"username\"]').value;\n      const email = form.querySelector('input[name=\"email\"]').value;\n      const password = form.querySelector('input[name=\"password\"]').value;\n      try {\n        await authService.register({\n          username,\n          email,\n          password\n        });\n        this.closeAllModals();\n        window.location.reload(); // Refresh to show authenticated state\n      } catch (error) {\n        // Display error message in the modal\n        const errorElement = form.querySelector('.error-message');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n          errorElement.style.display = 'block';\n        }\n      }\n    };\n\n    // Remove existing event listener to prevent duplicates\n    form.removeEventListener('submit', handleSubmit);\n    // Add new event listener\n    form.addEventListener('submit', handleSubmit);\n  }\n  initChatModal(data) {\n    const {\n      userId\n    } = data;\n    const chatContainer = document.getElementById('chat-messages-container');\n    if (!chatContainer || !userId) return;\n\n    // Load chat history with this user\n    chatService.getMessages(userId).then(response => {\n      // Render messages\n      chatContainer.innerHTML = response.messages.map(msg => `<div class=\"message ${msg.sender === 'me' ? 'sent' : 'received'}\">\n                        <p>${msg.content}</p>\n                        <span class=\"timestamp\">${new Date(msg.timestamp).toLocaleTimeString()}</span>\n                      </div>`).join('');\n\n      // Scroll to bottom\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n    }).catch(error => {\n      console.error('Failed to load messages:', error);\n      chatContainer.innerHTML = '<p class=\"error\">Failed to load messages. Please try again.</p>';\n    });\n\n    // Set up message form\n    const messageForm = document.getElementById('chat-message-form');\n    if (messageForm) {\n      const handleSend = async e => {\n        e.preventDefault();\n        const messageInput = messageForm.querySelector('input[name=\"message\"]');\n        const message = messageInput.value.trim();\n        if (message) {\n          try {\n            await chatService.sendMessage(userId, message);\n            messageInput.value = '';\n          } catch (error) {\n            console.error('Failed to send message:', error);\n          }\n        }\n      };\n\n      // Remove existing event listener to prevent duplicates\n      messageForm.removeEventListener('submit', handleSend);\n      // Add new event listener\n      messageForm.addEventListener('submit', handleSend);\n    }\n  }\n}\nexport const modalHandlers = new ModalHandlers();","map":{"version":3,"names":["authService","chatService","ModalHandlers","constructor","activeModals","eventListeners","initialize","modalEventListener","handleModalEvent","bind","window","addEventListener","push","type","handler","document","querySelectorAll","forEach","button","openModal","e","target","classList","contains","closeAllModals","cleanup","listener","removeEventListener","event","modalType","data","detail","modal","getElementById","style","display","body","add","initLoginForm","initRegisterForm","initChatModal","remove","form","handleSubmit","preventDefault","email","querySelector","value","password","login","location","reload","error","errorElement","textContent","message","username","register","userId","chatContainer","getMessages","then","response","innerHTML","messages","map","msg","sender","content","Date","timestamp","toLocaleTimeString","join","scrollTop","scrollHeight","catch","console","messageForm","handleSend","messageInput","trim","sendMessage","modalHandlers"],"sources":["/Users/lszydlowski/Desktop/czat_portal/frontend/src/services/modal-handlers.js"],"sourcesContent":["// src/services/modal-handlers.js\nimport { authService } from './authService';\nimport { chatService } from './chatService';\n\nclass ModalHandlers {\n  constructor() {\n    this.activeModals = [];\n    this.eventListeners = [];\n  }\n\n  initialize() {\n    // Set up global event listeners for modals\n    const modalEventListener = this.handleModalEvent.bind(this);\n    window.addEventListener('modal_event', modalEventListener);\n    this.eventListeners.push({ type: 'modal_event', handler: modalEventListener });\n    \n    // Listen for auth-related events\n    document.querySelectorAll('.login-button').forEach(button => {\n      button.addEventListener('click', () => this.openModal('login'));\n    });\n    \n    document.querySelectorAll('.register-button').forEach(button => {\n      button.addEventListener('click', () => this.openModal('register'));\n    });\n    \n    // Close modal on backdrop click or X button\n    document.addEventListener('click', (e) => {\n      if (e.target.classList.contains('modal-backdrop') || \n          e.target.classList.contains('modal-close')) {\n        this.closeAllModals();\n      }\n    });\n  }\n\n  cleanup() {\n    // Remove all event listeners\n    this.eventListeners.forEach(listener => {\n      window.removeEventListener(listener.type, listener.handler);\n    });\n    this.eventListeners = [];\n  }\n\n  handleModalEvent(event) {\n    const { modalType, data } = event.detail;\n    this.openModal(modalType, data);\n  }\n\n  openModal(type, data = {}) {\n    const modal = document.getElementById(`${type}-modal`);\n    if (!modal) return;\n    \n    // Display the modal\n    modal.style.display = 'block';\n    document.body.classList.add('modal-open');\n    this.activeModals.push(type);\n    \n    // Handle specific modal types\n    switch (type) {\n      case 'login':\n        this.initLoginForm();\n        break;\n      case 'register':\n        this.initRegisterForm();\n        break;\n      case 'chat':\n        this.initChatModal(data);\n        break;\n      default:\n        break;\n    }\n  }\n\n  closeAllModals() {\n    document.querySelectorAll('.modal').forEach(modal => {\n      modal.style.display = 'none';\n    });\n    document.body.classList.remove('modal-open');\n    this.activeModals = [];\n  }\n\n  initLoginForm() {\n    const form = document.getElementById('login-form');\n    if (!form) return;\n    \n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      const email = form.querySelector('input[name=\"email\"]').value;\n      const password = form.querySelector('input[name=\"password\"]').value;\n      \n      try {\n        await authService.login({ email, password });\n        this.closeAllModals();\n        window.location.reload(); // Refresh to show authenticated state\n      } catch (error) {\n        // Display error message in the modal\n        const errorElement = form.querySelector('.error-message');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n          errorElement.style.display = 'block';\n        }\n      }\n    };\n    \n    // Remove existing event listener to prevent duplicates\n    form.removeEventListener('submit', handleSubmit);\n    // Add new event listener\n    form.addEventListener('submit', handleSubmit);\n  }\n\n  initRegisterForm() {\n    const form = document.getElementById('register-form');\n    if (!form) return;\n    \n    const handleSubmit = async (e) => {\n      e.preventDefault();\n      const username = form.querySelector('input[name=\"username\"]').value;\n      const email = form.querySelector('input[name=\"email\"]').value;\n      const password = form.querySelector('input[name=\"password\"]').value;\n      \n      try {\n        await authService.register({ username, email, password });\n        this.closeAllModals();\n        window.location.reload(); // Refresh to show authenticated state\n      } catch (error) {\n        // Display error message in the modal\n        const errorElement = form.querySelector('.error-message');\n        if (errorElement) {\n          errorElement.textContent = error.message;\n          errorElement.style.display = 'block';\n        }\n      }\n    };\n    \n    // Remove existing event listener to prevent duplicates\n    form.removeEventListener('submit', handleSubmit);\n    // Add new event listener\n    form.addEventListener('submit', handleSubmit);\n  }\n\n  initChatModal(data) {\n    const { userId } = data;\n    const chatContainer = document.getElementById('chat-messages-container');\n    if (!chatContainer || !userId) return;\n    \n    // Load chat history with this user\n    chatService.getMessages(userId)\n      .then(response => {\n        // Render messages\n        chatContainer.innerHTML = response.messages\n          .map(msg => `<div class=\"message ${msg.sender === 'me' ? 'sent' : 'received'}\">\n                        <p>${msg.content}</p>\n                        <span class=\"timestamp\">${new Date(msg.timestamp).toLocaleTimeString()}</span>\n                      </div>`)\n          .join('');\n          \n        // Scroll to bottom\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      })\n      .catch(error => {\n        console.error('Failed to load messages:', error);\n        chatContainer.innerHTML = '<p class=\"error\">Failed to load messages. Please try again.</p>';\n      });\n      \n    // Set up message form\n    const messageForm = document.getElementById('chat-message-form');\n    if (messageForm) {\n      const handleSend = async (e) => {\n        e.preventDefault();\n        const messageInput = messageForm.querySelector('input[name=\"message\"]');\n        const message = messageInput.value.trim();\n        \n        if (message) {\n          try {\n            await chatService.sendMessage(userId, message);\n            messageInput.value = '';\n          } catch (error) {\n            console.error('Failed to send message:', error);\n          }\n        }\n      };\n      \n      // Remove existing event listener to prevent duplicates\n      messageForm.removeEventListener('submit', handleSend);\n      // Add new event listener\n      messageForm.addEventListener('submit', handleSend);\n    }\n  }\n}\n\nexport const modalHandlers = new ModalHandlers();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}